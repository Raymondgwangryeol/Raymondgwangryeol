// 예제로 배우는 C# 프로그래밍 참고


using System;
/*
* Nullable<T> *

    C#에는 value타입과 Reference 타입이 있다.
    Value 타입: 값 무조건 있어야 함 / Reference type: null도 허용
    int?, bool?, DateTime? == T? == Nullable<T>(구조체)
    예를 들어, int?는 컴파일 시 Nullable<int>로 변환됨.

    Nullable<T> 구조체는 missing value가 맞는지 아닌지를 체크하는 HasValue 속성과 실제 값을 나타내는 Value 속성을 가지고 있음.
    만약 HasValue가 false면 자동으로 Nullable type로 바꿔줌.
    그 예가 DB와 연동되는 Data Layer 클래스임.(DAL - Any time a business object needs to access the data tier, you use the method calls in the DAL instead of calling directly down to the data tier.)
    만약 DB Table에 non-nullable한 데이터들이 있다면 HasValue로 null값을 체크한 후, .Value 속성을 써서 실제값을 사용함.
        +).Value: 올바른 내부값이 할당된 경우 현재 Nullable<T>의 값을 가져옵니다.


*/
namespace Basic
{
    class Nullable_12
    {
        double _Sum = 0;
        DateTime _Time;
        bool? _Selected;

        public void CheckInput(int? i, double? d, DateTime? time, bool? selected)
        {
            if (i.HasValue && d.HasValue) // 둘 다 null이 아니면
                this._Sum = (double)i.Value + (double)d.Value; // int랑 double이랑 더하기

            // time값이 있는 체크.
            if (!time.HasValue) //null이면
                throw new ArgumentException(); // The thing you want to instantiate is null. 하면서 에러. 던져버리도록 하자
            else
                this._Time = time.Value;

            // 만약 selected가 NULL이면 false를 할당
            this._Selected = selected ?? false;
        }
        static void Main(string[] args)
        {
          
        }
    }
}
