// 예제로 배우는 C# 프로그래밍 참고


/*
 Enumerator(Iterator). 집합적인 데이터셋으로부터 데이터를 하나씩 호출자에게 보내줌
 Caller(호출자)에게 컬렉션 데이터를 하나씩 리턴할 때 사용

 Q) 언제 사용되나요?
    - 데이터 양이 커서 모든 데이터를 한꺼번에 가져오는 것 보다 조금씩 리턴하는게 더 효율적일 경우
    - 예를 들면, 어떤 메서드가 무제한의 데이터를 리턴할 경우
 */

//.NET에서 Enumerator쓸 때 IEnumerator라는 인터페이스를 구현해야 함.
// Current(속성), MoveNext()(메서드), Reset()(메서드)로 구성.
// Current랑 MoveNext는 반드시 구현되어야 함
using System;
using System.Collections.Generic;

namespace Basic
{
    class Yield_09
    {
        // Enumerable 클래스에서 GetEnumerator() 메서드를 구현하는 방법으로 yield를 사용
        // 리턴 타입은 IEnumerator 인터페이스
        // yield 사용하면, 명시적으로 별도의 Enumerator 클래스 작성 안 해도 됨.
        static IEnumerable<int> GetNumber()  // Enumerable 클래스. IEnumerable 인터페이스를 구현해야 한다.
                                             // GetEnumerator()라는 하나의 메서드를 가지고 있다(IEnumerator를 구현한 객체를 리턴)
        {
            // yield return: 컬렉션 데이터를 하나씩 리턴.
            // 호출 시 마다 값을 하나씩 리턴

            yield return 10; // 첫 번째 루프에서 리턴되는 값
            yield return 20; // 두 번째 루프에서 리턴되는 값
            yield return 30; // 세 번째 루프에서 리턴되는 값

            // +) 컬렉션이란?
            //      - 데이터의 검색과 저장에 특화
            //      - 배열 리스트, 해시 테이블, 큐, 스택 등을 지원. 자료 구조라고 말 할 수 있음
        }

        public class MyList
        {
            private int[] data = { 1, 2, 3, 4, 5};

            public IEnumerator<int> GetEnumerator()
            {
                int i = 0;
                while (i < data.Length)
                {
                    yield return data[i];
                    i++;
                }
            }
        }
        static void Main(string[] args)
        {
            foreach (int i in GetNumber())
            {
                Console.WriteLine(i);
            }

            // foreach 사용, Iteration
            var list = new MyList();
            foreach (var item in list)
            {
                Console.WriteLine(item);
            }

        }
    }
